#![no_std]
#![no_main]

use cortex_m_rt::entry;

use cortex_m_semihosting::hprintln;
use ironfish_frost::{
    dkg::{
        round1::{self, PublicPackage},
        round2::{self, CombinedPublicPackage},
        round3,
    },
    participant::Secret,
};
use ironfish_frost_embedded::{init_heap, HEAP};
use rand::rngs::OsRng;

#[entry]
fn main() -> ! {
    init_heap();
    let secret_bytes1 = [
        114, 136, 136, 22, 115, 240, 152, 86, 98, 56, 165, 29, 32, 55, 65, 45, 24, 99, 174, 191,
        13, 71, 194, 15, 162, 59, 14, 56, 26, 80, 59, 66, 97, 138, 181, 122, 76, 83, 141, 3, 30,
        45, 153, 171, 77, 168, 222, 0, 132, 148, 48, 164, 233, 121, 24, 223, 161, 68, 247, 116,
        146, 68, 106, 182, 105,
    ];
    let secret1 = Secret::deserialize_from(&secret_bytes1[..]).unwrap();
    hprintln!("1");

    // let secret_bytes2 = [
    //     114, 161, 192, 95, 237, 141, 2, 175, 235, 116, 90, 68, 112, 75, 235, 161, 106, 152, 146,
    //     47, 17, 51, 216, 163, 253, 73, 40, 165, 121, 163, 67, 175, 23, 38, 242, 52, 134, 156, 251,
    //     3, 161, 179, 87, 236, 200, 67, 163, 161, 116, 213, 213, 224, 7, 98, 49, 208, 226, 90, 124,
    //     169, 186, 230, 113, 153, 45,
    // ];
    // let secret2 = Secret::deserialize_from(&secret_bytes2[..]).unwrap();

    // let secret_bytes3 = [
    //     114, 187, 249, 168, 103, 43, 108, 7, 116, 175, 15, 108, 192, 94, 149, 21, 188, 205, 118,
    //     159, 21, 30, 237, 55, 89, 87, 67, 19, 216, 245, 75, 28, 206, 194, 46, 238, 191, 228, 106,
    //     4, 35, 56, 22, 45, 68, 223, 105, 67, 100, 22, 123, 28, 36, 76, 75, 193, 35, 111, 2, 223,
    //     227, 135, 119, 124, 242,
    // ];
    // let secret3 = Secret::deserialize_from(&secret_bytes3[..]).unwrap();

    let encrypted_secret_package_bytes1 = [
        225, 191, 19, 188, 196, 136, 165, 215, 22, 43, 61, 12, 67, 43, 77, 134, 51, 14, 130, 29,
        35, 162, 65, 86, 192, 151, 136, 9, 42, 137, 196, 50, 158, 131, 80, 18, 173, 231, 146, 118,
        198, 158, 75, 29, 161, 65, 195, 167, 1, 0, 0, 0, 136, 0, 0, 0, 29, 244, 105, 158, 19, 154,
        243, 193, 56, 137, 66, 162, 192, 251, 115, 87, 69, 21, 180, 171, 227, 28, 135, 214, 70,
        159, 212, 156, 108, 222, 147, 201, 113, 12, 86, 247, 150, 94, 103, 39, 215, 123, 210, 190,
        172, 14, 131, 53, 57, 88, 71, 107, 253, 113, 40, 6, 180, 129, 134, 118, 163, 71, 28, 5,
        156, 103, 110, 221, 52, 33, 95, 153, 18, 48, 169, 217, 231, 140, 213, 149, 97, 129, 161,
        222, 196, 31, 39, 158, 207, 188, 235, 82, 154, 174, 70, 98, 48, 60, 166, 227, 188, 101, 36,
        89, 49, 42, 243, 133, 136, 27, 85, 109, 58, 189, 85, 242, 46, 101, 203, 170, 89, 221, 24,
        155, 10, 239, 35, 142, 10, 201, 157, 5, 100, 38, 180, 161, 236, 174, 228, 188, 61, 143,
        240, 19, 36, 124, 160, 187, 110, 217, 71, 132, 44, 58, 89, 57, 19, 136, 181, 78, 218, 217,
        234, 40, 121, 52, 247, 154,
    ];
    // let encrypted_secret_package_bytes2 = [
    //     178, 30, 15, 95, 120, 147, 61, 181, 186, 62, 183, 185, 165, 187, 217, 39, 4, 31, 223, 28,
    //     100, 124, 216, 207, 75, 204, 4, 235, 48, 42, 132, 33, 168, 176, 17, 76, 245, 192, 250, 164,
    //     168, 91, 87, 63, 119, 172, 245, 0, 1, 0, 0, 0, 136, 0, 0, 0, 15, 27, 129, 231, 30, 50, 123,
    //     120, 19, 29, 164, 201, 40, 138, 32, 120, 247, 191, 167, 153, 177, 120, 179, 226, 128, 169,
    //     157, 23, 88, 42, 123, 114, 110, 113, 41, 207, 149, 18, 200, 38, 216, 197, 253, 79, 155,
    //     160, 164, 210, 164, 55, 246, 167, 204, 154, 115, 176, 213, 54, 145, 45, 179, 209, 81, 40,
    //     72, 85, 110, 236, 224, 24, 158, 38, 83, 214, 129, 226, 220, 45, 239, 134, 155, 76, 166, 71,
    //     200, 150, 139, 101, 163, 37, 207, 78, 110, 62, 69, 249, 41, 77, 171, 160, 81, 183, 132,
    //     184, 70, 122, 32, 118, 254, 113, 111, 246, 22, 25, 172, 251, 44, 144, 123, 154, 249, 27,
    //     138, 108, 31, 100, 61, 235, 163, 177, 160, 198, 37, 226, 26, 204, 189, 206, 189, 128, 236,
    //     26, 139, 130, 78, 236, 230, 93, 79, 217, 88, 247, 97, 125, 119, 30, 148, 68, 8, 38, 195,
    //     30, 235, 193, 230, 158, 65, 52,
    // ];
    // let encrypted_secret_package_bytes3 = [
    //     228, 142, 46, 246, 174, 139, 66, 112, 58, 139, 82, 229, 104, 248, 39, 209, 225, 0, 2, 250,
    //     64, 194, 19, 154, 7, 116, 169, 12, 163, 52, 104, 62, 156, 222, 91, 96, 78, 190, 175, 30,
    //     97, 209, 213, 139, 2, 235, 15, 194, 1, 0, 0, 0, 136, 0, 0, 0, 143, 8, 161, 76, 83, 161,
    //     133, 125, 139, 204, 239, 53, 24, 11, 8, 71, 184, 144, 107, 41, 111, 23, 21, 171, 236, 214,
    //     136, 55, 7, 181, 221, 175, 200, 106, 213, 163, 227, 210, 133, 250, 83, 96, 112, 235, 164,
    //     101, 85, 71, 58, 208, 112, 92, 158, 218, 80, 179, 115, 135, 186, 101, 222, 92, 116, 38, 80,
    //     242, 4, 0, 38, 114, 147, 215, 57, 251, 62, 122, 172, 40, 79, 117, 220, 216, 139, 98, 187,
    //     49, 119, 111, 126, 178, 201, 0, 20, 102, 104, 25, 61, 165, 113, 139, 248, 178, 243, 45,
    //     202, 183, 77, 65, 134, 206, 231, 215, 129, 254, 37, 219, 45, 142, 142, 172, 111, 73, 171,
    //     4, 59, 75, 21, 122, 128, 158, 74, 142, 32, 148, 136, 81, 21, 42, 167, 18, 237, 239, 88,
    //     194, 72, 23, 201, 191, 9, 42, 31, 151, 231, 115, 216, 252, 42, 130, 200, 86, 82, 178, 243,
    //     208, 100, 132, 51, 205,
    // ];
    hprintln!("2");

    let package_bytes1 = [
        114, 86, 240, 217, 3, 5, 5, 151, 109, 35, 242, 2, 173, 214, 229, 169, 53, 81, 158, 56, 11,
        208, 196, 125, 160, 214, 61, 34, 131, 114, 104, 159, 249, 68, 105, 129, 152, 91, 62, 174,
        188, 2, 234, 183, 130, 166, 165, 242, 242, 96, 199, 49, 16, 147, 238, 81, 209, 111, 155,
        102, 62, 105, 147, 111, 21, 182, 195, 205, 53, 190, 9, 56, 2, 162, 146, 165, 153, 152, 227,
        114, 151, 222, 188, 228, 143, 177, 101, 235, 99, 28, 190, 223, 54, 137, 15, 157, 161, 231,
        209, 43, 237, 221, 144, 4, 48, 180, 164, 190, 92, 249, 126, 210, 126, 196, 65, 44, 157,
        137, 147, 7, 73, 246, 81, 116, 70, 52, 180, 34, 15, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2,
        32, 23, 65, 90, 188, 183, 130, 128, 194, 25, 128, 225, 220, 62, 63, 168, 117, 104, 232,
        197, 235, 166, 160, 130, 110, 71, 167, 24, 199, 222, 213, 206, 184, 144, 165, 117, 137,
        125, 97, 253, 189, 72, 76, 144, 207, 138, 30, 58, 54, 159, 248, 109, 174, 202, 11, 199,
        114, 106, 169, 220, 95, 109, 87, 59, 64, 33, 217, 38, 194, 12, 42, 243, 202, 21, 181, 86,
        78, 98, 101, 127, 243, 101, 255, 21, 81, 18, 81, 61, 117, 253, 145, 172, 96, 181, 183, 67,
        62, 69, 223, 164, 29, 30, 93, 211, 252, 139, 69, 255, 139, 127, 231, 237, 150, 103, 93,
        127, 249, 118, 72, 52, 63, 59, 231, 241, 80, 79, 203, 80, 1, 184, 0, 0, 0, 243, 198, 176,
        133, 198, 238, 14, 96, 78, 200, 168, 24, 97, 103, 108, 186, 249, 48, 165, 228, 171, 10,
        159, 109, 50, 24, 16, 86, 87, 253, 14, 105, 208, 253, 55, 235, 51, 117, 46, 184, 33, 21,
        254, 97, 221, 1, 184, 150, 3, 0, 0, 0, 32, 0, 0, 0, 44, 71, 225, 44, 215, 234, 22, 219, 28,
        88, 67, 199, 242, 243, 220, 159, 192, 94, 133, 161, 82, 158, 109, 232, 159, 25, 183, 26,
        58, 8, 26, 69, 189, 237, 175, 193, 77, 89, 156, 155, 40, 241, 187, 140, 7, 208, 92, 120,
        27, 5, 170, 146, 23, 228, 192, 208, 14, 219, 195, 59, 8, 204, 37, 47, 170, 170, 195, 136,
        239, 38, 76, 153, 233, 224, 66, 58, 125, 68, 211, 227, 145, 4, 190, 175, 132, 56, 232, 103,
        77, 128, 123, 204, 59, 44, 203, 103, 124, 141, 112, 106, 48, 147, 243, 43, 24, 190, 127,
        64, 16, 23, 121, 172, 241, 88, 101, 20, 242, 51, 111, 254, 224, 73, 95, 169, 152, 189, 240,
        225, 159, 239, 122, 4, 39, 163, 118, 232,
    ];
    let package1 = PublicPackage::deserialize_from(&package_bytes1[..]).unwrap();
    hprintln!("3");

    let package_bytes2 = [
        114, 124, 157, 239, 202, 84, 148, 135, 52, 15, 62, 107, 173, 82, 253, 13, 117, 75, 6, 135,
        56, 156, 243, 44, 3, 170, 171, 36, 76, 131, 197, 32, 211, 118, 184, 117, 116, 149, 169,
        123, 189, 69, 107, 185, 175, 126, 77, 86, 61, 231, 87, 234, 76, 58, 70, 225, 255, 199, 58,
        137, 90, 6, 145, 115, 10, 253, 17, 225, 57, 67, 76, 154, 49, 98, 200, 53, 35, 189, 10, 66,
        53, 228, 151, 246, 8, 223, 92, 111, 40, 239, 197, 196, 67, 219, 255, 86, 72, 149, 61, 78,
        66, 192, 23, 15, 56, 192, 51, 193, 1, 41, 48, 18, 113, 30, 103, 158, 180, 122, 243, 29,
        127, 167, 124, 139, 63, 140, 89, 57, 11, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 169, 136, 67,
        80, 119, 144, 36, 46, 54, 194, 30, 120, 227, 43, 16, 222, 1, 214, 231, 254, 29, 210, 204,
        204, 65, 137, 80, 15, 210, 15, 152, 162, 67, 64, 107, 98, 38, 85, 187, 175, 158, 71, 203,
        10, 193, 118, 169, 72, 130, 176, 19, 21, 174, 60, 210, 206, 169, 3, 116, 90, 154, 144, 56,
        160, 64, 145, 67, 153, 13, 65, 207, 96, 61, 7, 150, 193, 230, 213, 84, 128, 200, 33, 99,
        227, 148, 67, 116, 150, 27, 246, 61, 81, 22, 34, 192, 32, 83, 196, 121, 214, 0, 68, 237,
        152, 23, 178, 96, 161, 247, 210, 247, 90, 251, 213, 227, 183, 223, 208, 37, 219, 94, 207,
        43, 220, 166, 182, 149, 10, 1, 184, 0, 0, 0, 148, 124, 207, 137, 157, 240, 125, 80, 10, 52,
        132, 57, 152, 136, 227, 159, 218, 36, 42, 177, 220, 64, 67, 128, 150, 127, 34, 81, 55, 179,
        123, 113, 48, 50, 174, 58, 134, 92, 178, 6, 252, 150, 121, 212, 201, 98, 196, 124, 3, 0, 0,
        0, 32, 0, 0, 0, 101, 95, 76, 77, 83, 22, 246, 62, 217, 242, 19, 237, 11, 52, 244, 203, 50,
        106, 112, 79, 182, 233, 18, 139, 104, 63, 120, 78, 139, 134, 92, 80, 113, 14, 124, 79, 130,
        92, 58, 151, 215, 52, 228, 184, 37, 102, 225, 49, 169, 111, 76, 182, 208, 4, 164, 36, 236,
        202, 87, 67, 97, 165, 73, 90, 166, 198, 180, 183, 196, 189, 30, 55, 240, 213, 203, 133,
        176, 143, 152, 204, 181, 111, 113, 66, 251, 25, 198, 35, 225, 38, 143, 218, 149, 19, 239,
        109, 40, 82, 217, 30, 63, 161, 30, 84, 31, 122, 97, 252, 76, 228, 147, 7, 219, 121, 218,
        73, 185, 78, 135, 1, 218, 248, 92, 217, 129, 120, 25, 217, 159, 239, 122, 4, 39, 163, 118,
        232,
    ];
    let package2 = PublicPackage::deserialize_from(&package_bytes2[..]).unwrap();
    hprintln!("4");

    let package_bytes3 = [
        114, 47, 118, 27, 67, 116, 82, 234, 125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46,
        84, 194, 85, 11, 196, 124, 42, 106, 198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165,
        83, 238, 112, 106, 39, 38, 123, 27, 222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143,
        54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162,
        251, 43, 189, 252, 47, 247, 111, 184, 115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235,
        166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155,
        8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 228,
        154, 198, 17, 47, 195, 124, 188, 148, 56, 173, 98, 123, 183, 4, 60, 211, 69, 103, 89, 133,
        101, 98, 189, 122, 81, 229, 49, 175, 81, 246, 233, 33, 75, 37, 64, 198, 194, 242, 172, 254,
        5, 53, 55, 165, 192, 161, 126, 39, 112, 233, 121, 107, 207, 134, 161, 121, 97, 52, 9, 240,
        189, 43, 163, 64, 58, 192, 233, 238, 218, 68, 3, 174, 252, 246, 95, 177, 39, 231, 136, 162,
        209, 66, 164, 251, 192, 189, 53, 101, 14, 51, 110, 108, 194, 153, 158, 190, 154, 45, 165,
        242, 163, 66, 127, 180, 178, 176, 160, 101, 5, 236, 156, 136, 119, 172, 126, 112, 72, 218,
        57, 1, 218, 219, 71, 224, 165, 69, 118, 1, 184, 0, 0, 0, 89, 17, 199, 202, 234, 25, 138,
        185, 232, 221, 100, 39, 39, 168, 159, 180, 0, 251, 235, 244, 177, 185, 222, 99, 54, 9, 127,
        16, 114, 70, 59, 27, 162, 163, 253, 232, 180, 120, 222, 170, 46, 131, 208, 41, 158, 102,
        22, 61, 3, 0, 0, 0, 32, 0, 0, 0, 160, 51, 197, 47, 57, 96, 76, 18, 133, 225, 222, 90, 129,
        235, 78, 233, 199, 28, 81, 36, 189, 184, 161, 97, 63, 215, 87, 2, 13, 96, 70, 47, 16, 190,
        125, 178, 81, 147, 218, 202, 195, 4, 145, 200, 116, 31, 185, 139, 100, 25, 220, 244, 39,
        123, 124, 168, 190, 110, 101, 7, 213, 14, 109, 27, 39, 114, 124, 243, 184, 92, 164, 47,
        213, 112, 27, 159, 44, 228, 170, 219, 155, 241, 94, 160, 182, 48, 138, 228, 156, 106, 96,
        191, 129, 249, 253, 184, 54, 176, 183, 247, 190, 193, 8, 217, 224, 173, 209, 187, 61, 79,
        14, 159, 245, 111, 55, 97, 7, 197, 62, 208, 103, 68, 125, 56, 118, 118, 128, 211, 159, 239,
        122, 4, 39, 163, 118, 232,
    ];
    let package3 = PublicPackage::deserialize_from(&package_bytes3[..]).unwrap();
    hprintln!("5");

    let round2_public_package_bytes1 = [
        114, 86, 240, 217, 3, 5, 5, 151, 109, 35, 242, 2, 173, 214, 229, 169, 53, 81, 158, 56, 11,
        208, 196, 125, 160, 214, 61, 34, 131, 114, 104, 159, 249, 68, 105, 129, 152, 91, 62, 174,
        188, 2, 234, 183, 130, 166, 165, 242, 242, 96, 199, 49, 16, 147, 238, 81, 209, 111, 155,
        102, 62, 105, 147, 111, 21, 182, 195, 205, 53, 190, 9, 56, 2, 162, 146, 165, 153, 152, 227,
        114, 151, 222, 188, 228, 143, 177, 101, 235, 99, 28, 190, 223, 54, 137, 15, 157, 161, 231,
        209, 43, 237, 221, 144, 4, 48, 180, 164, 190, 92, 249, 126, 210, 126, 196, 65, 44, 157,
        137, 147, 7, 73, 246, 81, 116, 70, 52, 180, 34, 15, 2, 0, 0, 0, 114, 124, 157, 239, 202,
        84, 148, 135, 52, 15, 62, 107, 173, 82, 253, 13, 117, 75, 6, 135, 56, 156, 243, 44, 3, 170,
        171, 36, 76, 131, 197, 32, 211, 118, 184, 117, 116, 149, 169, 123, 189, 69, 107, 185, 175,
        126, 77, 86, 61, 231, 87, 234, 76, 58, 70, 225, 255, 199, 58, 137, 90, 6, 145, 115, 10,
        253, 17, 225, 57, 67, 76, 154, 49, 98, 200, 53, 35, 189, 10, 66, 53, 228, 151, 246, 8, 223,
        92, 111, 40, 239, 197, 196, 67, 219, 255, 86, 72, 149, 61, 78, 66, 192, 23, 15, 56, 192,
        51, 193, 1, 41, 48, 18, 113, 30, 103, 158, 180, 122, 243, 29, 127, 167, 124, 139, 63, 140,
        89, 57, 11, 37, 0, 0, 0, 0, 195, 210, 5, 30, 201, 8, 93, 132, 232, 95, 223, 221, 65, 61,
        121, 243, 209, 87, 41, 62, 151, 216, 230, 51, 227, 215, 199, 2, 24, 34, 139, 240, 89, 161,
        103, 14, 100, 14, 227, 129, 8, 76, 116, 155, 114, 47, 118, 27, 67, 116, 82, 234, 125, 80,
        5, 23, 107, 34, 74, 188, 122, 185, 128, 46, 84, 194, 85, 11, 196, 124, 42, 106, 198, 207,
        178, 239, 125, 211, 153, 172, 15, 45, 165, 83, 238, 112, 106, 39, 38, 123, 27, 222, 78,
        247, 136, 167, 178, 166, 93, 241, 204, 143, 54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14,
        199, 134, 138, 59, 77, 169, 1, 110, 37, 162, 251, 43, 189, 252, 47, 247, 111, 184, 115, 0,
        100, 222, 32, 198, 254, 196, 5, 112, 235, 166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2,
        95, 159, 242, 57, 82, 138, 247, 33, 155, 8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7,
        37, 0, 0, 0, 0, 195, 210, 5, 30, 82, 167, 35, 222, 139, 98, 117, 155, 102, 159, 220, 171,
        102, 227, 54, 165, 106, 108, 46, 180, 185, 18, 2, 161, 29, 37, 90, 100, 254, 192, 179, 11,
        100, 14, 227, 129, 8, 76, 116, 155,
    ];
    let round2_public_packages_1 =
        CombinedPublicPackage::deserialize_from(&round2_public_package_bytes1[..]).unwrap();
    hprintln!("6");

    let round2_public_package_bytes2 = [
        114, 124, 157, 239, 202, 84, 148, 135, 52, 15, 62, 107, 173, 82, 253, 13, 117, 75, 6, 135,
        56, 156, 243, 44, 3, 170, 171, 36, 76, 131, 197, 32, 211, 118, 184, 117, 116, 149, 169,
        123, 189, 69, 107, 185, 175, 126, 77, 86, 61, 231, 87, 234, 76, 58, 70, 225, 255, 199, 58,
        137, 90, 6, 145, 115, 10, 253, 17, 225, 57, 67, 76, 154, 49, 98, 200, 53, 35, 189, 10, 66,
        53, 228, 151, 246, 8, 223, 92, 111, 40, 239, 197, 196, 67, 219, 255, 86, 72, 149, 61, 78,
        66, 192, 23, 15, 56, 192, 51, 193, 1, 41, 48, 18, 113, 30, 103, 158, 180, 122, 243, 29,
        127, 167, 124, 139, 63, 140, 89, 57, 11, 2, 0, 0, 0, 114, 47, 118, 27, 67, 116, 82, 234,
        125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46, 84, 194, 85, 11, 196, 124, 42, 106,
        198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165, 83, 238, 112, 106, 39, 38, 123, 27,
        222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143, 54, 49, 94, 198, 146, 12, 2, 235, 110,
        74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162, 251, 43, 189, 252, 47, 247, 111, 184,
        115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235, 166, 222, 145, 16, 158, 63, 146, 80, 140,
        77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155, 8, 11, 62, 221, 227, 105, 197, 113, 214,
        249, 7, 37, 0, 0, 0, 0, 195, 210, 5, 30, 254, 119, 57, 231, 191, 147, 247, 103, 35, 86, 27,
        59, 190, 122, 9, 188, 229, 200, 28, 211, 156, 78, 19, 61, 77, 88, 246, 228, 252, 93, 137,
        5, 100, 14, 227, 129, 8, 76, 116, 155, 114, 86, 240, 217, 3, 5, 5, 151, 109, 35, 242, 2,
        173, 214, 229, 169, 53, 81, 158, 56, 11, 208, 196, 125, 160, 214, 61, 34, 131, 114, 104,
        159, 249, 68, 105, 129, 152, 91, 62, 174, 188, 2, 234, 183, 130, 166, 165, 242, 242, 96,
        199, 49, 16, 147, 238, 81, 209, 111, 155, 102, 62, 105, 147, 111, 21, 182, 195, 205, 53,
        190, 9, 56, 2, 162, 146, 165, 153, 152, 227, 114, 151, 222, 188, 228, 143, 177, 101, 235,
        99, 28, 190, 223, 54, 137, 15, 157, 161, 231, 209, 43, 237, 221, 144, 4, 48, 180, 164, 190,
        92, 249, 126, 210, 126, 196, 65, 44, 157, 137, 147, 7, 73, 246, 81, 116, 70, 52, 180, 34,
        15, 37, 0, 0, 0, 0, 195, 210, 5, 30, 224, 48, 240, 20, 77, 140, 6, 104, 210, 47, 14, 236,
        151, 212, 198, 54, 218, 173, 65, 56, 0, 214, 239, 66, 79, 173, 28, 109, 73, 77, 163, 7,
        100, 14, 227, 129, 8, 76, 116, 155,
    ];
    let round2_public_packages_2 =
        CombinedPublicPackage::deserialize_from(&round2_public_package_bytes2[..]).unwrap();
    hprintln!("7");

    let round2_public_package_bytes3 = [
        114, 47, 118, 27, 67, 116, 82, 234, 125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46,
        84, 194, 85, 11, 196, 124, 42, 106, 198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165,
        83, 238, 112, 106, 39, 38, 123, 27, 222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143,
        54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162,
        251, 43, 189, 252, 47, 247, 111, 184, 115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235,
        166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155,
        8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7, 2, 0, 0, 0, 114, 124, 157, 239, 202, 84,
        148, 135, 52, 15, 62, 107, 173, 82, 253, 13, 117, 75, 6, 135, 56, 156, 243, 44, 3, 170,
        171, 36, 76, 131, 197, 32, 211, 118, 184, 117, 116, 149, 169, 123, 189, 69, 107, 185, 175,
        126, 77, 86, 61, 231, 87, 234, 76, 58, 70, 225, 255, 199, 58, 137, 90, 6, 145, 115, 10,
        253, 17, 225, 57, 67, 76, 154, 49, 98, 200, 53, 35, 189, 10, 66, 53, 228, 151, 246, 8, 223,
        92, 111, 40, 239, 197, 196, 67, 219, 255, 86, 72, 149, 61, 78, 66, 192, 23, 15, 56, 192,
        51, 193, 1, 41, 48, 18, 113, 30, 103, 158, 180, 122, 243, 29, 127, 167, 124, 139, 63, 140,
        89, 57, 11, 37, 0, 0, 0, 0, 195, 210, 5, 30, 84, 109, 151, 162, 113, 112, 176, 103, 151,
        157, 30, 151, 32, 68, 243, 213, 248, 208, 124, 167, 151, 163, 154, 166, 126, 71, 126, 153,
        189, 205, 34, 4, 100, 14, 227, 129, 8, 76, 116, 155, 114, 86, 240, 217, 3, 5, 5, 151, 109,
        35, 242, 2, 173, 214, 229, 169, 53, 81, 158, 56, 11, 208, 196, 125, 160, 214, 61, 34, 131,
        114, 104, 159, 249, 68, 105, 129, 152, 91, 62, 174, 188, 2, 234, 183, 130, 166, 165, 242,
        242, 96, 199, 49, 16, 147, 238, 81, 209, 111, 155, 102, 62, 105, 147, 111, 21, 182, 195,
        205, 53, 190, 9, 56, 2, 162, 146, 165, 153, 152, 227, 114, 151, 222, 188, 228, 143, 177,
        101, 235, 99, 28, 190, 223, 54, 137, 15, 157, 161, 231, 209, 43, 237, 221, 144, 4, 48, 180,
        164, 190, 92, 249, 126, 210, 126, 196, 65, 44, 157, 137, 147, 7, 73, 246, 81, 116, 70, 52,
        180, 34, 15, 37, 0, 0, 0, 0, 195, 210, 5, 30, 6, 247, 112, 1, 148, 146, 178, 4, 99, 244,
        140, 167, 103, 94, 151, 163, 125, 203, 169, 148, 106, 4, 198, 245, 126, 18, 166, 111, 50,
        137, 216, 1, 100, 14, 227, 129, 8, 76, 116, 155,
    ];
    let round2_public_packages_3 =
        CombinedPublicPackage::deserialize_from(&round2_public_package_bytes3[..]).unwrap();
    hprintln!("8");

    // let round1_packages = [&package1, &package2, &package3];
    // let round2_packages = [
    //     &round2_public_packages_1,
    //     &round2_public_packages_2,
    //     &round2_public_packages_3,
    // ];

    // execute_round3(
    //     1,
    //     &secret1,
    //     &encrypted_secret_package_bytes1,
    //     round1_packages,
    //     round2_packages,
    // );

    let (key_package, public_key_package, group_secret_key) = round3::round3(
        &secret1,
        &encrypted_secret_package_bytes1,
        [&package1, &package2, &package3],
        [
            &round2_public_packages_1,
            &round2_public_packages_2,
            &round2_public_packages_3,
        ],
    )
    .unwrap();
    hprintln!("Heap used {}", HEAP.used()).unwrap();
    hprintln!("key_package {:?}", key_package.serialize().unwrap()).unwrap();
    hprintln!("public_key_package {:?}", public_key_package.serialize()).unwrap();
    hprintln!("group_secret {:?}", group_secret_key).unwrap();

    panic!("End of main");
}

// fn execute_round3<'a>(
//     identity_id: u8,
//     secret: &Secret,
//     round2_secret_package: &[u8],
//     round1_public_packages: impl IntoIterator<Item = &'a round1::PublicPackage>,
//     round2_public_packages: impl IntoIterator<Item = &'a round2::CombinedPublicPackage>,
// ) {
//     let (key_package, public_key_package, group_secret_key) = round3::round3(
//         &secret,
//         &round2_secret_package,
//         round1_public_packages,
//         round2_public_packages,
//     )
//     .unwrap();
//     hprintln!("Heap used {}", HEAP.used()).unwrap();
//     hprintln!("key_package {:?}", key_package.serialize().unwrap()).unwrap();
//     hprintln!("public_key_package {:?}", public_key_package.serialize()).unwrap();
//     hprintln!("group_secret {:?}", group_secret_key).unwrap();
// }
