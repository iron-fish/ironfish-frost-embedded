#![no_std]
#![no_main]

extern crate alloc;
use alloc::vec::Vec;

use cortex_m_rt::entry;

use cortex_m_semihosting::hprintln;
use ironfish_frost::{
    dkg::{
        round1::{self, PublicPackage},
        round2::{self, CombinedPublicPackage},
        round3,
    },
    participant::Secret,
};
use ironfish_frost_embedded::{init_heap, HEAP};
use rand::rngs::OsRng;

#[entry]
fn main() -> ! {
    init_heap();
    let binding1 = [114, 124, 157, 239, 202, 84, 148, 135, 52, 15, 62, 107, 173, 82, 253, 13, 117, 75, 6, 135, 56, 156, 243, 44, 3, 170, 171, 36, 76, 131, 197, 32, 211, 118, 184, 117, 116, 149, 169, 123, 189, 69, 107, 185, 175, 126, 77, 86, 61, 231, 87, 234, 76, 58, 70, 225, 255, 199, 58, 137, 90, 6, 145, 115, 10, 253, 17, 225, 57, 67, 76, 154, 49, 98, 200, 53, 35, 189, 10, 66, 53, 228, 151, 246, 8, 223, 92, 111, 40, 239, 197, 196, 67, 219, 255, 86, 72, 149, 61, 78, 66, 192, 23, 15, 56, 192, 51, 193, 1, 41, 48, 18, 113, 30, 103, 158, 180, 122, 243, 29, 127, 167, 124, 139, 63, 140, 89, 57, 11]; 
    let binding2 = [114, 47, 118, 27, 67, 116, 82, 234, 125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46, 84, 194, 85, 11, 196, 124, 42, 106, 198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165, 83, 238, 112, 106, 39, 38, 123, 27, 222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143, 54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162, 251, 43, 189, 252, 47, 247, 111, 184, 115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235, 166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155, 8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7]; 
    let participants: Vec<&[u8]> = Vec::from([
        &binding1[..], &binding2[..]
    ]);


    let binding3 = [0, 195, 210, 5, 30, 2, 169, 136, 67, 80, 119, 144, 36, 46, 54, 194, 30, 120, 227, 43, 16, 222, 1, 214, 231, 254, 29, 210, 204, 204, 65, 137, 80, 15, 210, 15, 152, 162, 67, 64, 107, 98, 38, 85, 187, 175, 158, 71, 203, 10, 193, 118, 169, 72, 130, 176, 19, 21, 174, 60, 210, 206, 169, 3, 116, 90, 154, 144, 56, 160, 64, 145, 67, 153, 13, 65, 207, 96, 61, 7, 150, 193, 230, 213, 84, 128, 200, 33, 99, 227, 148, 67, 116, 150, 27, 246, 61, 81, 22, 34, 192, 32, 83, 196, 121, 214, 0, 68, 237, 152, 23, 178, 96, 161, 247, 210, 247, 90, 251, 213, 227, 183, 223, 208, 37, 219, 94, 207, 43, 220, 166, 182, 149, 10, 1];
    let binding4 = [0, 195, 210, 5, 30, 2, 228, 154, 198, 17, 47, 195, 124, 188, 148, 56, 173, 98, 123, 183, 4, 60, 211, 69, 103, 89, 133, 101, 98, 189, 122, 81, 229, 49, 175, 81, 246, 233, 33, 75, 37, 64, 198, 194, 242, 172, 254, 5, 53, 55, 165, 192, 161, 126, 39, 112, 233, 121, 107, 207, 134, 161, 121, 97, 52, 9, 240, 189, 43, 163, 64, 58, 192, 233, 238, 218, 68, 3, 174, 252, 246, 95, 177, 39, 231, 136, 162, 209, 66, 164, 251, 192, 189, 53, 101, 14, 51, 110, 108, 194, 153, 158, 190, 154, 45, 165, 242, 163, 66, 127, 180, 178, 176, 160, 101, 5, 236, 156, 136, 119, 172, 126, 112, 72, 218, 57, 1, 218, 219, 71, 224, 165, 69, 118, 1];
    let round1_frost_packages = Vec::from([
        &binding3[..], &binding4[..]
    ]);

    hprintln!("round1_frost_packages {:?}", round1_frost_packages).unwrap();

    let binding5 = [0, 195, 210, 5, 30, 224, 48, 240, 20, 77, 140, 6, 104, 210, 47, 14, 236, 151, 212, 198, 54, 218, 173, 65, 56, 0, 214, 239, 66, 79, 173, 28, 109, 73, 77, 163, 7];
    let binding6 = [0, 195, 210, 5, 30, 6, 247, 112, 1, 148, 146, 178, 4, 99, 244, 140, 167, 103, 94, 151, 163, 125, 203, 169, 148, 106, 4, 198, 245, 126, 18, 166, 111, 50, 137, 216, 1];

    let round2_frost_packages = Vec::from([
        &binding5[..], &binding6[..]
    ]); 

    let gsk1 = [243, 198, 176, 133, 198, 238, 14, 96, 78, 200, 168, 24, 97, 103, 108, 186, 249, 48, 165, 228, 171, 10, 159, 109, 50, 24, 16, 86, 87, 253, 14, 105, 208, 253, 55, 235, 51, 117, 46, 184, 33, 21, 254, 97, 221, 1, 184, 150, 3, 0, 0, 0, 32, 0, 0, 0, 44, 71, 225, 44, 215, 234, 22, 219, 28, 88, 67, 199, 242, 243, 220, 159, 192, 94, 133, 161, 82, 158, 109, 232, 159, 25, 183, 26, 58, 8, 26, 69, 189, 237, 175, 193, 77, 89, 156, 155, 40, 241, 187, 140, 7, 208, 92, 120, 27, 5, 170, 146, 23, 228, 192, 208, 14, 219, 195, 59, 8, 204, 37, 47, 170, 170, 195, 136, 239, 38, 76, 153, 233, 224, 66, 58, 125, 68, 211, 227, 145, 4, 190, 175, 132, 56, 232, 103, 77, 128, 123, 204, 59, 44, 203, 103, 124, 141, 112, 106, 48, 147, 243, 43, 24, 190, 127, 64, 16, 23, 121, 172, 241, 88, 101, 20, 242, 51, 111, 254, 224, 73, 95, 169, 152, 189, 240, 225]; 
    let gsk2 = [148, 124, 207, 137, 157, 240, 125, 80, 10, 52, 132, 57, 152, 136, 227, 159, 218, 36, 42, 177, 220, 64, 67, 128, 150, 127, 34, 81, 55, 179, 123, 113, 48, 50, 174, 58, 134, 92, 178, 6, 252, 150, 121, 212, 201, 98, 196, 124, 3, 0, 0, 0, 32, 0, 0, 0, 101, 95, 76, 77, 83, 22, 246, 62, 217, 242, 19, 237, 11, 52, 244, 203, 50, 106, 112, 79, 182, 233, 18, 139, 104, 63, 120, 78, 139, 134, 92, 80, 113, 14, 124, 79, 130, 92, 58, 151, 215, 52, 228, 184, 37, 102, 225, 49, 169, 111, 76, 182, 208, 4, 164, 36, 236, 202, 87, 67, 97, 165, 73, 90, 166, 198, 180, 183, 196, 189, 30, 55, 240, 213, 203, 133, 176, 143, 152, 204, 181, 111, 113, 66, 251, 25, 198, 35, 225, 38, 143, 218, 149, 19, 239, 109, 40, 82, 217, 30, 63, 161, 30, 84, 31, 122, 97, 252, 76, 228, 147, 7, 219, 121, 218, 73, 185, 78, 135, 1, 218, 248, 92, 217, 129, 120, 25, 217]; 
    let gsk3 = [89, 17, 199, 202, 234, 25, 138, 185, 232, 221, 100, 39, 39, 168, 159, 180, 0, 251, 235, 244, 177, 185, 222, 99, 54, 9, 127, 16, 114, 70, 59, 27, 162, 163, 253, 232, 180, 120, 222, 170, 46, 131, 208, 41, 158, 102, 22, 61, 3, 0, 0, 0, 32, 0, 0, 0, 160, 51, 197, 47, 57, 96, 76, 18, 133, 225, 222, 90, 129, 235, 78, 233, 199, 28, 81, 36, 189, 184, 161, 97, 63, 215, 87, 2, 13, 96, 70, 47, 16, 190, 125, 178, 81, 147, 218, 202, 195, 4, 145, 200, 116, 31, 185, 139, 100, 25, 220, 244, 39, 123, 124, 168, 190, 110, 101, 7, 213, 14, 109, 27, 39, 114, 124, 243, 184, 92, 164, 47, 213, 112, 27, 159, 44, 228, 170, 219, 155, 241, 94, 160, 182, 48, 138, 228, 156, 106, 96, 191, 129, 249, 253, 184, 54, 176, 183, 247, 190, 193, 8, 217, 224, 173, 209, 187, 61, 79, 14, 159, 245, 111, 55, 97, 7, 197, 62, 208, 103, 68, 125, 56, 118, 118, 128, 211]; 
    let gsk_bytes  = Vec::from([
        &gsk1[..], &gsk2[..], &gsk3[..]
    ]);

    let min_signers = 2;

    // HEAP.reset_max();
    // init_heap();
    hprintln!("BEFORE MAX Heap used {}", HEAP.max_used()).unwrap();
    hprintln!("Heap used {}", HEAP.used()).unwrap();

    let secret_bytes1 = [114, 136, 136, 22, 115, 240, 152, 86, 98, 56, 165, 29, 32, 55, 65, 45, 24, 99, 174, 191,13, 71, 194, 15, 162, 59, 14, 56, 26, 80, 59, 66, 97, 138, 181, 122, 76, 83, 141, 3, 30,45, 153, 171, 77, 168, 222, 0, 132, 148, 48, 164, 233, 121, 24, 223, 161, 68, 247, 116,146, 68, 106, 182, 105,];
    let secret1 = Secret::deserialize_from(&secret_bytes1[..]).unwrap();
    let encrypted_secret_package_bytes1 = [225, 191, 19, 188, 196, 136, 165, 215, 22, 43, 61, 12, 67, 43, 77, 134, 51, 14, 130, 29,35, 162, 65, 86, 192, 151, 136, 9, 42, 137, 196, 50, 158, 131, 80, 18, 173, 231, 146, 118,198, 158, 75, 29, 161, 65, 195, 167, 1, 0, 0, 0, 136, 0, 0, 0, 29, 244, 105, 158, 19, 154,243, 193, 56, 137, 66, 162, 192, 251, 115, 87, 69, 21, 180, 171, 227, 28, 135, 214, 70,159, 212, 156, 108, 222, 147, 201, 113, 12, 86, 247, 150, 94, 103, 39, 215, 123, 210, 190,172, 14, 131, 53, 57, 88, 71, 107, 253, 113, 40, 6, 180, 129, 134, 118, 163, 71, 28, 5,156, 103, 110, 221, 52, 33, 95, 153, 18, 48, 169, 217, 231, 140, 213, 149, 97, 129, 161,222, 196, 31, 39, 158, 207, 188, 235, 82, 154, 174, 70, 98, 48, 60, 166, 227, 188, 101, 36,89, 49, 42, 243, 133, 136, 27, 85, 109, 58, 189, 85, 242, 46, 101, 203, 170, 89, 221, 24,155, 10, 239, 35, 142, 10, 201, 157, 5, 100, 38, 180, 161, 236, 174, 228, 188, 61, 143,240, 19, 36, 124, 160, 187, 110, 217, 71, 132, 44, 58, 89, 57, 19, 136, 181, 78, 218, 217,234, 40, 121, 52, 247, 154,];


    let (key_package, public_key_package, group_secret_key) =  round3::round3_min(&secret1, participants, &encrypted_secret_package_bytes1, round1_frost_packages, round2_frost_packages, gsk_bytes, min_signers).unwrap();

    hprintln!("MAX Heap used {}", HEAP.max_used()).unwrap();
    hprintln!("Heap used {}", HEAP.used()).unwrap();
    hprintln!("key_package {:?}", key_package.serialize().unwrap()).unwrap();
    hprintln!("public_key_package {:?}", public_key_package.serialize()).unwrap();
    hprintln!("group_secret {:?}", group_secret_key).unwrap();

    panic!("End of main");
}

// fn execute_round3<'a>(
//     identity_id: u8,
//     secret: &Secret,
//     round2_secret_package: &[u8],
//     round1_public_packages: impl IntoIterator<Item = &'a round1::PublicPackage>,
//     round2_public_packages: impl IntoIterator<Item = &'a round2::CombinedPublicPackage>,
// ) {
//     let (key_package, public_key_package, group_secret_key) = round3::round3(
//         &secret,
//         &round2_secret_package,
//         round1_public_packages,
//         round2_public_packages,
//     )
//     .unwrap();
//     hprintln!("Heap used {}", HEAP.used()).unwrap();
//     hprintln!("key_package {:?}", key_package.serialize().unwrap()).unwrap();
//     hprintln!("public_key_package {:?}", public_key_package.serialize()).unwrap();
//     hprintln!("group_secret {:?}", group_secret_key).unwrap();
// }
