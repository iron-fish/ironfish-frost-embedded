#![no_std]
#![no_main]

use cortex_m_rt::entry;

use cortex_m_semihosting::hprintln;
use ironfish_frost::{dkg::{round1::PublicPackage, round2}, participant::Secret};
use ironfish_frost_embedded::{init_heap, HEAP};
use rand::rngs::OsRng;


#[entry]
fn main() -> ! {
    init_heap();
    let mut rng = OsRng;
    let secret_bytes: [u8; 65] = [114, 187, 249, 168, 103, 43, 108, 7, 116, 175, 15, 108, 192, 94, 149, 21, 188, 205, 118, 159, 21, 30, 237, 55, 89, 87, 67, 19, 216, 245, 75, 28, 206, 194, 46, 238, 191, 228, 106, 4, 35, 56, 22, 45, 68, 223, 105, 67, 100, 22, 123, 28, 36, 76, 75, 193, 35, 111, 2, 223, 227, 135, 119, 124, 242];
    let secret = Secret::deserialize_from(&secret_bytes[..]).unwrap();

    let round1_secret_package_bytes:[u8; 260] = [52, 51, 61, 252, 169, 124, 250, 129, 241, 19, 249, 33, 104, 190, 189, 74, 161, 5, 167, 106, 191, 182, 193, 110, 238, 29, 105, 0, 241, 128, 226, 120, 48, 59, 250, 175, 108, 251, 25, 130, 68, 209, 154, 237, 92, 111, 237, 53, 1, 0, 0, 0, 172, 0, 0, 0, 244, 244, 44, 127, 148, 157, 69, 80, 64, 143, 9, 232, 166, 246, 155, 98, 247, 232, 139, 59, 106, 153, 95, 186, 58, 212, 216, 254, 14, 178, 107, 56, 108, 99, 118, 63, 23, 35, 109, 219, 253, 194, 171, 219, 123, 185, 137, 33, 146, 104, 164, 101, 206, 127, 134, 177, 105, 88, 121, 72, 157, 127, 246, 81, 141, 207, 63, 91, 150, 89, 219, 66, 62, 221, 31, 240, 64, 10, 96, 97, 114, 196, 225, 156, 135, 46, 244, 162, 147, 32, 87, 43, 234, 186, 17, 99, 179, 216, 32, 246, 37, 42, 189, 27, 254, 255, 188, 177, 230, 203, 210, 12, 104, 244, 121, 19, 39, 27, 137, 59, 249, 199, 204, 91, 86, 142, 164, 241, 37, 101, 129, 83, 187, 122, 163, 81, 47, 165, 101, 244, 146, 182, 184, 15, 249, 217, 228, 135, 75, 191, 239, 126, 52, 8, 23, 93, 251, 25, 161, 94, 16, 176, 51, 195, 117, 163, 238, 14, 177, 155, 106, 137, 40, 61, 198, 68, 19, 157, 28, 198, 180, 136, 106, 40, 214, 99, 215, 115, 30, 163, 129, 17, 66, 149, 238, 82, 70, 71, 153, 120, 155, 76, 122, 244];
    let package1_bytes:[u8; 432] = [114, 74, 119, 222, 130, 99, 78, 38, 205, 60, 41, 201, 219, 43, 52, 110, 44, 77, 173, 209, 211, 24, 150, 205, 114, 137, 152, 201, 0, 183, 124, 109, 217, 186, 199, 249, 57, 92, 215, 245, 13, 84, 15, 12, 2, 145, 174, 16, 115, 127, 131, 134, 108, 3, 187, 108, 223, 118, 252, 46, 179, 12, 114, 174, 6, 33, 84, 161, 211, 175, 30, 62, 150, 14, 99, 245, 180, 206, 227, 15, 89, 135, 196, 8, 48, 174, 82, 34, 131, 224, 227, 229, 236, 53, 45, 160, 195, 219, 83, 102, 188, 78, 188, 109, 127, 118, 109, 22, 158, 77, 185, 84, 134, 139, 247, 42, 127, 100, 22, 154, 224, 89, 50, 178, 221, 238, 78, 14, 1, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 148, 205, 167, 159, 122, 176, 22, 41, 106, 80, 76, 205, 162, 179, 53, 227, 132, 64, 184, 30, 54, 155, 230, 246, 167, 48, 31, 192, 119, 68, 68, 161, 227, 253, 206, 129, 101, 10, 130, 103, 133, 43, 97, 29, 246, 227, 31, 235, 49, 186, 175, 76, 205, 142, 187, 245, 76, 208, 180, 36, 10, 200, 7, 12, 64, 173, 156, 18, 5, 51, 219, 197, 47, 248, 34, 2, 74, 231, 128, 59, 111, 253, 90, 196, 16, 236, 118, 206, 7, 200, 98, 244, 75, 195, 116, 181, 26, 175, 8, 152, 101, 127, 11, 201, 131, 28, 149, 85, 165, 219, 103, 202, 33, 243, 78, 10, 61, 184, 200, 109, 211, 129, 133, 149, 166, 34, 123, 244, 9, 152, 0, 0, 0, 229, 69, 170, 160, 233, 50, 40, 76, 19, 15, 225, 165, 50, 118, 39, 85, 21, 153, 204, 93, 51, 169, 99, 60, 219, 195, 236, 156, 157, 9, 214, 119, 92, 200, 55, 155, 164, 150, 175, 28, 130, 253, 121, 97, 107, 235, 110, 227, 2, 0, 0, 0, 32, 0, 0, 0, 207, 143, 106, 136, 116, 20, 70, 25, 234, 201, 120, 150, 224, 121, 148, 37, 46, 17, 140, 242, 4, 227, 201, 76, 90, 219, 254, 25, 82, 234, 219, 157, 224, 94, 170, 178, 101, 147, 92, 107, 34, 237, 155, 153, 117, 142, 225, 157, 243, 49, 215, 111, 31, 115, 143, 220, 130, 237, 99, 70, 88, 238, 253, 160, 198, 208, 167, 226, 157, 79, 151, 49, 72, 242, 175, 40, 200, 179, 238, 39, 186, 245, 133, 1, 221, 4, 178, 239, 42, 118, 229, 101, 221, 5, 40, 145, 41, 172, 201, 82, 189, 249, 222, 197];
    let package1 =  PublicPackage::deserialize_from(&package1_bytes[..]).unwrap();
    let package2_bytes: [u8;432] = [114, 47, 118, 27, 67, 116, 82, 234, 125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46, 84, 194, 85, 11, 196, 124, 42, 106, 198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165, 83, 238, 112, 106, 39, 38, 123, 27, 222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143, 54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162, 251, 43, 189, 252, 47, 247, 111, 184, 115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235, 166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155, 8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 148, 205, 167, 159, 122, 176, 22, 41, 106, 80, 76, 205, 162, 179, 53, 227, 132, 64, 184, 30, 54, 155, 230, 246, 167, 48, 31, 192, 119, 68, 68, 161, 227, 253, 206, 129, 101, 10, 130, 103, 133, 43, 97, 29, 246, 227, 31, 235, 49, 186, 175, 76, 205, 142, 187, 245, 76, 208, 180, 36, 10, 200, 7, 12, 64, 173, 156, 18, 5, 51, 219, 197, 47, 248, 34, 2, 74, 231, 128, 59, 111, 253, 90, 196, 16, 236, 118, 206, 7, 200, 98, 244, 75, 195, 116, 181, 26, 60, 192, 119, 237, 161, 255, 176, 141, 217, 177, 183, 74, 185, 100, 186, 115, 165, 214, 72, 32, 101, 12, 186, 33, 11, 142, 79, 206, 152, 158, 77, 2, 152, 0, 0, 0, 229, 69, 170, 160, 233, 50, 40, 76, 19, 15, 225, 165, 50, 118, 39, 85, 21, 153, 204, 93, 51, 169, 99, 60, 219, 195, 236, 156, 157, 9, 214, 119, 92, 200, 55, 155, 164, 150, 175, 28, 130, 253, 121, 97, 107, 235, 110, 227, 2, 0, 0, 0, 32, 0, 0, 0, 207, 143, 106, 136, 116, 20, 70, 25, 234, 201, 120, 150, 224, 121, 148, 37, 46, 17, 140, 242, 4, 227, 201, 76, 90, 219, 254, 25, 82, 234, 219, 157, 224, 94, 170, 178, 101, 147, 92, 107, 34, 237, 155, 153, 117, 142, 225, 157, 243, 49, 215, 111, 31, 115, 143, 220, 130, 237, 99, 70, 88, 238, 253, 160, 198, 208, 167, 226, 157, 79, 151, 49, 72, 242, 175, 40, 200, 179, 238, 39, 186, 245, 133, 1, 221, 4, 178, 239, 42, 118, 229, 101, 221, 5, 40, 145, 41, 172, 201, 82, 189, 249, 222, 197];
    let package2 = PublicPackage::deserialize_from(&package2_bytes[..]).unwrap();

    let (encrypted_secret_package, round2_public_packages) = round2::round2(
        &secret,
        &round1_secret_package_bytes,
        [&package1, &package2],
        rng,
    )
    .unwrap();
    hprintln!("Heap used {}", HEAP.used()).unwrap();
    hprintln!("encrypted_secret_package {:?}", encrypted_secret_package).unwrap();
    hprintln!("package {:?}", round2_public_packages.serialize()).unwrap();

    panic!("End of main");
}
