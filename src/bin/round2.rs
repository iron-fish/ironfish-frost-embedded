#![no_std]
#![no_main]

use cortex_m_rt::entry;

use cortex_m_semihosting::hprintln;
use ironfish_frost::{
    dkg::{
        round1::{self, PublicPackage},
        round2,
    },
    participant::{self, Secret},
};
use ironfish_frost_embedded::{init_heap, HEAP};
use rand::{rngs::OsRng, CryptoRng, RngCore};

#[entry]
fn main() -> ! {
    init_heap();
    let mut rng = OsRng;
    let secret_bytes1 = [
        114, 136, 136, 22, 115, 240, 152, 86, 98, 56, 165, 29, 32, 55, 65, 45, 24, 99, 174, 191,
        13, 71, 194, 15, 162, 59, 14, 56, 26, 80, 59, 66, 97, 138, 181, 122, 76, 83, 141, 3, 30,
        45, 153, 171, 77, 168, 222, 0, 132, 148, 48, 164, 233, 121, 24, 223, 161, 68, 247, 116,
        146, 68, 106, 182, 105,
    ];
    let secret1 = Secret::deserialize_from(&secret_bytes1[..]).unwrap();

    let secret_bytes2 = [
        114, 161, 192, 95, 237, 141, 2, 175, 235, 116, 90, 68, 112, 75, 235, 161, 106, 152, 146,
        47, 17, 51, 216, 163, 253, 73, 40, 165, 121, 163, 67, 175, 23, 38, 242, 52, 134, 156, 251,
        3, 161, 179, 87, 236, 200, 67, 163, 161, 116, 213, 213, 224, 7, 98, 49, 208, 226, 90, 124,
        169, 186, 230, 113, 153, 45,
    ];
    let secret2 = Secret::deserialize_from(&secret_bytes2[..]).unwrap();

    let secret_bytes3 = [
        114, 187, 249, 168, 103, 43, 108, 7, 116, 175, 15, 108, 192, 94, 149, 21, 188, 205, 118,
        159, 21, 30, 237, 55, 89, 87, 67, 19, 216, 245, 75, 28, 206, 194, 46, 238, 191, 228, 106,
        4, 35, 56, 22, 45, 68, 223, 105, 67, 100, 22, 123, 28, 36, 76, 75, 193, 35, 111, 2, 223,
        227, 135, 119, 124, 242,
    ];
    let secret3 = Secret::deserialize_from(&secret_bytes3[..]).unwrap();

    let round1_secret_package_bytes1 = [
        217, 254, 65, 120, 79, 173, 48, 142, 8, 247, 188, 16, 202, 181, 199, 67, 65, 205, 22, 150,
        60, 94, 18, 168, 155, 15, 40, 168, 68, 250, 30, 76, 118, 29, 60, 18, 33, 151, 234, 34, 163,
        35, 243, 255, 52, 252, 122, 162, 1, 0, 0, 0, 172, 0, 0, 0, 17, 122, 209, 7, 129, 85, 152,
        125, 251, 46, 203, 64, 128, 16, 245, 73, 231, 158, 128, 82, 218, 84, 175, 17, 110, 17, 42,
        235, 228, 24, 182, 252, 79, 10, 190, 16, 136, 41, 166, 61, 245, 69, 11, 94, 181, 103, 41,
        62, 40, 50, 58, 66, 144, 157, 110, 24, 71, 248, 120, 71, 242, 33, 8, 211, 209, 222, 169,
        73, 65, 253, 82, 34, 133, 25, 26, 135, 151, 70, 187, 251, 95, 241, 124, 168, 140, 202, 5,
        153, 25, 147, 180, 68, 210, 216, 7, 37, 51, 96, 73, 180, 18, 43, 30, 8, 190, 6, 157, 154,
        90, 28, 123, 148, 87, 124, 233, 119, 15, 150, 249, 135, 125, 202, 205, 49, 197, 166, 164,
        50, 131, 241, 110, 58, 245, 189, 91, 18, 64, 129, 93, 87, 27, 51, 12, 64, 22, 168, 149,
        218, 48, 107, 255, 119, 192, 205, 156, 11, 199, 209, 78, 209, 35, 163, 8, 204, 59, 17, 54,
        149, 66, 240, 11, 52, 109, 200, 61, 1, 223, 34, 65, 245, 21, 40, 5, 230, 5, 162, 28, 253,
        62, 65, 217, 125, 198, 110, 189, 110, 6, 148, 26, 150, 234, 28, 225, 178,
    ];

    let round1_secret_package_bytes2 = [
        187, 147, 1, 131, 232, 45, 190, 12, 241, 161, 137, 81, 175, 183, 52, 176, 16, 54, 186, 131,
        95, 85, 94, 199, 207, 221, 247, 24, 195, 253, 51, 1, 144, 132, 141, 241, 29, 229, 127, 4,
        215, 181, 177, 242, 135, 222, 177, 8, 1, 0, 0, 0, 172, 0, 0, 0, 154, 6, 219, 237, 186, 75,
        43, 81, 187, 24, 25, 103, 45, 85, 198, 180, 46, 22, 8, 46, 125, 215, 81, 136, 208, 3, 202,
        212, 98, 63, 123, 81, 73, 64, 86, 243, 219, 163, 224, 204, 246, 164, 144, 27, 190, 2, 192,
        81, 233, 177, 92, 142, 229, 243, 46, 122, 42, 192, 67, 206, 112, 163, 240, 110, 26, 53, 68,
        196, 46, 78, 40, 239, 43, 35, 54, 243, 116, 148, 158, 120, 58, 86, 221, 83, 254, 226, 115,
        215, 11, 100, 233, 250, 127, 61, 73, 227, 17, 113, 23, 194, 116, 77, 47, 88, 50, 239, 33,
        201, 42, 84, 14, 174, 75, 87, 250, 95, 1, 2, 141, 237, 133, 129, 39, 18, 133, 246, 156, 22,
        39, 195, 205, 51, 77, 39, 24, 195, 154, 209, 178, 192, 43, 233, 32, 209, 178, 13, 74, 35,
        42, 129, 92, 157, 5, 84, 161, 111, 55, 58, 45, 88, 238, 174, 41, 150, 226, 225, 150, 231,
        203, 52, 208, 177, 88, 45, 140, 146, 92, 251, 4, 90, 14, 196, 4, 69, 59, 192, 235, 38, 71,
        204, 144, 8, 215, 129, 136, 10, 121, 71, 64, 153, 32, 84, 14, 171,
    ];

    let round1_secret_package_bytes3 = [
        195, 181, 24, 118, 171, 37, 172, 139, 202, 98, 43, 149, 238, 62, 26, 38, 17, 244, 74, 243,
        126, 45, 104, 71, 108, 250, 99, 137, 52, 8, 11, 104, 201, 34, 199, 22, 228, 144, 117, 73,
        79, 88, 18, 16, 173, 194, 106, 20, 1, 0, 0, 0, 172, 0, 0, 0, 231, 54, 183, 120, 215, 114,
        202, 82, 31, 99, 96, 194, 105, 67, 234, 141, 117, 91, 54, 95, 207, 38, 79, 88, 104, 202,
        125, 6, 11, 97, 10, 209, 88, 66, 174, 235, 186, 167, 35, 105, 88, 193, 232, 163, 150, 150,
        141, 108, 107, 235, 231, 64, 111, 4, 161, 194, 231, 120, 240, 110, 32, 19, 166, 209, 217,
        93, 243, 6, 18, 202, 255, 101, 36, 54, 190, 210, 129, 74, 206, 50, 27, 220, 105, 180, 165,
        52, 15, 218, 116, 183, 57, 195, 78, 71, 212, 146, 44, 200, 240, 71, 24, 47, 73, 96, 209,
        11, 155, 69, 63, 45, 18, 106, 115, 231, 163, 6, 147, 197, 172, 232, 45, 172, 51, 88, 105,
        56, 152, 192, 85, 175, 227, 81, 66, 43, 213, 246, 89, 20, 252, 95, 64, 4, 129, 96, 54, 34,
        34, 240, 45, 5, 200, 177, 142, 66, 26, 190, 117, 45, 208, 135, 218, 30, 62, 131, 176, 161,
        64, 6, 127, 149, 127, 246, 182, 83, 155, 252, 208, 130, 38, 37, 250, 45, 113, 237, 115,
        103, 111, 219, 143, 71, 199, 234, 64, 242, 130, 37, 109, 101, 76, 243, 225, 210, 247, 130,
    ];

    let package1_bytes1 = [
        114, 86, 240, 217, 3, 5, 5, 151, 109, 35, 242, 2, 173, 214, 229, 169, 53, 81, 158, 56, 11,
        208, 196, 125, 160, 214, 61, 34, 131, 114, 104, 159, 249, 68, 105, 129, 152, 91, 62, 174,
        188, 2, 234, 183, 130, 166, 165, 242, 242, 96, 199, 49, 16, 147, 238, 81, 209, 111, 155,
        102, 62, 105, 147, 111, 21, 182, 195, 205, 53, 190, 9, 56, 2, 162, 146, 165, 153, 152, 227,
        114, 151, 222, 188, 228, 143, 177, 101, 235, 99, 28, 190, 223, 54, 137, 15, 157, 161, 231,
        209, 43, 237, 221, 144, 4, 48, 180, 164, 190, 92, 249, 126, 210, 126, 196, 65, 44, 157,
        137, 147, 7, 73, 246, 81, 116, 70, 52, 180, 34, 15, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2,
        32, 23, 65, 90, 188, 183, 130, 128, 194, 25, 128, 225, 220, 62, 63, 168, 117, 104, 232,
        197, 235, 166, 160, 130, 110, 71, 167, 24, 199, 222, 213, 206, 184, 144, 165, 117, 137,
        125, 97, 253, 189, 72, 76, 144, 207, 138, 30, 58, 54, 159, 248, 109, 174, 202, 11, 199,
        114, 106, 169, 220, 95, 109, 87, 59, 64, 33, 217, 38, 194, 12, 42, 243, 202, 21, 181, 86,
        78, 98, 101, 127, 243, 101, 255, 21, 81, 18, 81, 61, 117, 253, 145, 172, 96, 181, 183, 67,
        62, 69, 223, 164, 29, 30, 93, 211, 252, 139, 69, 255, 139, 127, 231, 237, 150, 103, 93,
        127, 249, 118, 72, 52, 63, 59, 231, 241, 80, 79, 203, 80, 1, 184, 0, 0, 0, 243, 198, 176,
        133, 198, 238, 14, 96, 78, 200, 168, 24, 97, 103, 108, 186, 249, 48, 165, 228, 171, 10,
        159, 109, 50, 24, 16, 86, 87, 253, 14, 105, 208, 253, 55, 235, 51, 117, 46, 184, 33, 21,
        254, 97, 221, 1, 184, 150, 3, 0, 0, 0, 32, 0, 0, 0, 44, 71, 225, 44, 215, 234, 22, 219, 28,
        88, 67, 199, 242, 243, 220, 159, 192, 94, 133, 161, 82, 158, 109, 232, 159, 25, 183, 26,
        58, 8, 26, 69, 189, 237, 175, 193, 77, 89, 156, 155, 40, 241, 187, 140, 7, 208, 92, 120,
        27, 5, 170, 146, 23, 228, 192, 208, 14, 219, 195, 59, 8, 204, 37, 47, 170, 170, 195, 136,
        239, 38, 76, 153, 233, 224, 66, 58, 125, 68, 211, 227, 145, 4, 190, 175, 132, 56, 232, 103,
        77, 128, 123, 204, 59, 44, 203, 103, 124, 141, 112, 106, 48, 147, 243, 43, 24, 190, 127,
        64, 16, 23, 121, 172, 241, 88, 101, 20, 242, 51, 111, 254, 224, 73, 95, 169, 152, 189, 240,
        225, 159, 239, 122, 4, 39, 163, 118, 232,
    ];
    let package1 = PublicPackage::deserialize_from(&package1_bytes1[..]).unwrap();

    let package1_bytes2 = [
        114, 124, 157, 239, 202, 84, 148, 135, 52, 15, 62, 107, 173, 82, 253, 13, 117, 75, 6, 135,
        56, 156, 243, 44, 3, 170, 171, 36, 76, 131, 197, 32, 211, 118, 184, 117, 116, 149, 169,
        123, 189, 69, 107, 185, 175, 126, 77, 86, 61, 231, 87, 234, 76, 58, 70, 225, 255, 199, 58,
        137, 90, 6, 145, 115, 10, 253, 17, 225, 57, 67, 76, 154, 49, 98, 200, 53, 35, 189, 10, 66,
        53, 228, 151, 246, 8, 223, 92, 111, 40, 239, 197, 196, 67, 219, 255, 86, 72, 149, 61, 78,
        66, 192, 23, 15, 56, 192, 51, 193, 1, 41, 48, 18, 113, 30, 103, 158, 180, 122, 243, 29,
        127, 167, 124, 139, 63, 140, 89, 57, 11, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 169, 136, 67,
        80, 119, 144, 36, 46, 54, 194, 30, 120, 227, 43, 16, 222, 1, 214, 231, 254, 29, 210, 204,
        204, 65, 137, 80, 15, 210, 15, 152, 162, 67, 64, 107, 98, 38, 85, 187, 175, 158, 71, 203,
        10, 193, 118, 169, 72, 130, 176, 19, 21, 174, 60, 210, 206, 169, 3, 116, 90, 154, 144, 56,
        160, 64, 145, 67, 153, 13, 65, 207, 96, 61, 7, 150, 193, 230, 213, 84, 128, 200, 33, 99,
        227, 148, 67, 116, 150, 27, 246, 61, 81, 22, 34, 192, 32, 83, 196, 121, 214, 0, 68, 237,
        152, 23, 178, 96, 161, 247, 210, 247, 90, 251, 213, 227, 183, 223, 208, 37, 219, 94, 207,
        43, 220, 166, 182, 149, 10, 1, 184, 0, 0, 0, 148, 124, 207, 137, 157, 240, 125, 80, 10, 52,
        132, 57, 152, 136, 227, 159, 218, 36, 42, 177, 220, 64, 67, 128, 150, 127, 34, 81, 55, 179,
        123, 113, 48, 50, 174, 58, 134, 92, 178, 6, 252, 150, 121, 212, 201, 98, 196, 124, 3, 0, 0,
        0, 32, 0, 0, 0, 101, 95, 76, 77, 83, 22, 246, 62, 217, 242, 19, 237, 11, 52, 244, 203, 50,
        106, 112, 79, 182, 233, 18, 139, 104, 63, 120, 78, 139, 134, 92, 80, 113, 14, 124, 79, 130,
        92, 58, 151, 215, 52, 228, 184, 37, 102, 225, 49, 169, 111, 76, 182, 208, 4, 164, 36, 236,
        202, 87, 67, 97, 165, 73, 90, 166, 198, 180, 183, 196, 189, 30, 55, 240, 213, 203, 133,
        176, 143, 152, 204, 181, 111, 113, 66, 251, 25, 198, 35, 225, 38, 143, 218, 149, 19, 239,
        109, 40, 82, 217, 30, 63, 161, 30, 84, 31, 122, 97, 252, 76, 228, 147, 7, 219, 121, 218,
        73, 185, 78, 135, 1, 218, 248, 92, 217, 129, 120, 25, 217, 159, 239, 122, 4, 39, 163, 118,
        232,
    ];
    let package2 = PublicPackage::deserialize_from(&package1_bytes2[..]).unwrap();

    let package1_bytes3 = [
        114, 47, 118, 27, 67, 116, 82, 234, 125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46,
        84, 194, 85, 11, 196, 124, 42, 106, 198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165,
        83, 238, 112, 106, 39, 38, 123, 27, 222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143,
        54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162,
        251, 43, 189, 252, 47, 247, 111, 184, 115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235,
        166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155,
        8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 228,
        154, 198, 17, 47, 195, 124, 188, 148, 56, 173, 98, 123, 183, 4, 60, 211, 69, 103, 89, 133,
        101, 98, 189, 122, 81, 229, 49, 175, 81, 246, 233, 33, 75, 37, 64, 198, 194, 242, 172, 254,
        5, 53, 55, 165, 192, 161, 126, 39, 112, 233, 121, 107, 207, 134, 161, 121, 97, 52, 9, 240,
        189, 43, 163, 64, 58, 192, 233, 238, 218, 68, 3, 174, 252, 246, 95, 177, 39, 231, 136, 162,
        209, 66, 164, 251, 192, 189, 53, 101, 14, 51, 110, 108, 194, 153, 158, 190, 154, 45, 165,
        242, 163, 66, 127, 180, 178, 176, 160, 101, 5, 236, 156, 136, 119, 172, 126, 112, 72, 218,
        57, 1, 218, 219, 71, 224, 165, 69, 118, 1, 184, 0, 0, 0, 89, 17, 199, 202, 234, 25, 138,
        185, 232, 221, 100, 39, 39, 168, 159, 180, 0, 251, 235, 244, 177, 185, 222, 99, 54, 9, 127,
        16, 114, 70, 59, 27, 162, 163, 253, 232, 180, 120, 222, 170, 46, 131, 208, 41, 158, 102,
        22, 61, 3, 0, 0, 0, 32, 0, 0, 0, 160, 51, 197, 47, 57, 96, 76, 18, 133, 225, 222, 90, 129,
        235, 78, 233, 199, 28, 81, 36, 189, 184, 161, 97, 63, 215, 87, 2, 13, 96, 70, 47, 16, 190,
        125, 178, 81, 147, 218, 202, 195, 4, 145, 200, 116, 31, 185, 139, 100, 25, 220, 244, 39,
        123, 124, 168, 190, 110, 101, 7, 213, 14, 109, 27, 39, 114, 124, 243, 184, 92, 164, 47,
        213, 112, 27, 159, 44, 228, 170, 219, 155, 241, 94, 160, 182, 48, 138, 228, 156, 106, 96,
        191, 129, 249, 253, 184, 54, 176, 183, 247, 190, 193, 8, 217, 224, 173, 209, 187, 61, 79,
        14, 159, 245, 111, 55, 97, 7, 197, 62, 208, 103, 68, 125, 56, 118, 118, 128, 211, 159, 239,
        122, 4, 39, 163, 118, 232,
    ];
    let package3 = PublicPackage::deserialize_from(&package1_bytes3[..]).unwrap();

    let packages = [&package1, &package2, &package3];

    execute_round2(1, &secret1, &round1_secret_package_bytes1, packages, rng);
    execute_round2(2, &secret2, &round1_secret_package_bytes2, packages, rng);
    execute_round2(3, &secret3, &round1_secret_package_bytes3, packages, rng);

    panic!("End of main");
}

fn execute_round2<'a>(
    identity_id: u8,
    secret: &participant::Secret,
    round1_secret_package: &[u8],
    round1_public_packages: impl IntoIterator<Item = &'a round1::PublicPackage>,
    rng: impl RngCore + CryptoRng,
) {
    let (encrypted_secret_package, round2_public_packages) =
        round2::round2(secret, round1_secret_package, round1_public_packages, rng).unwrap();
    hprintln!("Heap used {}", HEAP.used()).unwrap();
    hprintln!(
        "let encrypted_secret_package_bytes{} = {:?};",
        identity_id,
        encrypted_secret_package
    )
    .unwrap();
    hprintln!(
        "let round2_public_package_bytes{} = {:?};",
        identity_id,
        round2_public_packages.serialize()
    )
    .unwrap();
}
