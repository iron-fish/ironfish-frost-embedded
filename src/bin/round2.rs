#![no_std]
#![no_main]

use cortex_m_rt::entry;

use cortex_m_semihosting::hprintln;
use ironfish_frost::{
    dkg::{round1::PublicPackage, round2},
    participant::Secret,
};
use ironfish_frost_embedded::{init_heap, HEAP};
use rand::rngs::OsRng;

#[entry]
fn main() -> ! {
    init_heap();
    let mut rng = OsRng;
    let secret_bytes: [u8; 65] = [
        114, 212, 49, 241, 224, 201, 214, 96, 253, 234, 196, 147, 16, 114, 64, 136, 14, 2, 90, 15,
        25, 9, 3, 204, 180, 100, 93, 128, 55, 72, 83, 138, 132, 93, 107, 169, 248, 45, 217, 4, 165,
        189, 213, 110, 191, 122, 46, 228, 85, 87, 32, 88, 66, 53, 100, 178, 99, 132, 135, 21, 12,
        41, 126, 96, 182,
    ];
    let secret = Secret::deserialize_from(&secret_bytes[..]).unwrap();

    let round1_secret_package_bytes: [u8; 260] = [
        29, 141, 81, 192, 74, 180, 57, 90, 206, 202, 252, 214, 93, 170, 27, 235, 106, 13, 204, 111,
        54, 7, 202, 136, 141, 60, 77, 227, 55, 148, 99, 37, 201, 102, 180, 57, 219, 70, 40, 169,
        185, 220, 54, 142, 30, 27, 81, 239, 1, 0, 0, 0, 172, 0, 0, 0, 62, 167, 176, 208, 39, 106,
        103, 92, 7, 143, 113, 77, 98, 6, 43, 139, 10, 220, 92, 180, 24, 115, 22, 34, 255, 8, 144,
        136, 87, 236, 112, 28, 223, 1, 134, 100, 243, 86, 159, 2, 32, 204, 85, 44, 120, 72, 79,
        203, 4, 75, 246, 192, 7, 113, 170, 18, 246, 212, 224, 97, 88, 76, 127, 249, 224, 123, 49,
        21, 220, 171, 197, 101, 238, 206, 182, 23, 23, 219, 88, 89, 80, 91, 244, 225, 239, 95, 162,
        198, 165, 120, 66, 188, 192, 115, 78, 83, 161, 0, 62, 74, 206, 157, 112, 139, 177, 8, 177,
        51, 5, 103, 177, 168, 113, 231, 97, 235, 189, 206, 84, 242, 235, 178, 59, 59, 80, 151, 196,
        155, 88, 137, 238, 33, 252, 254, 178, 41, 49, 107, 81, 96, 52, 167, 121, 179, 49, 171, 32,
        233, 15, 75, 167, 78, 179, 52, 24, 60, 64, 42, 98, 145, 159, 97, 135, 108, 0, 248, 89, 164,
        250, 163, 40, 33, 167, 136, 212, 143, 5, 9, 63, 241, 176, 214, 127, 107, 132, 184, 227, 85,
        122, 130, 65, 58, 14, 62, 194, 31, 103, 79, 87, 71, 81, 169, 233, 114,
    ];
    let package1_bytes: [u8; 464] = [
        114, 74, 119, 222, 130, 99, 78, 38, 205, 60, 41, 201, 219, 43, 52, 110, 44, 77, 173, 209,
        211, 24, 150, 205, 114, 137, 152, 201, 0, 183, 124, 109, 217, 186, 199, 249, 57, 92, 215,
        245, 13, 84, 15, 12, 2, 145, 174, 16, 115, 127, 131, 134, 108, 3, 187, 108, 223, 118, 252,
        46, 179, 12, 114, 174, 6, 33, 84, 161, 211, 175, 30, 62, 150, 14, 99, 245, 180, 206, 227,
        15, 89, 135, 196, 8, 48, 174, 82, 34, 131, 224, 227, 229, 236, 53, 45, 160, 195, 219, 83,
        102, 188, 78, 188, 109, 127, 118, 109, 22, 158, 77, 185, 84, 134, 139, 247, 42, 127, 100,
        22, 154, 224, 89, 50, 178, 221, 238, 78, 14, 1, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 75,
        64, 119, 180, 141, 52, 29, 96, 114, 81, 119, 45, 229, 33, 53, 143, 124, 110, 152, 251, 26,
        71, 16, 239, 127, 133, 174, 55, 209, 241, 221, 227, 188, 165, 23, 112, 84, 206, 133, 31,
        206, 146, 98, 199, 35, 110, 108, 40, 202, 200, 131, 13, 154, 179, 64, 30, 120, 78, 93, 88,
        110, 65, 227, 32, 64, 172, 84, 227, 125, 133, 190, 18, 235, 49, 53, 86, 168, 175, 250, 78,
        154, 99, 30, 196, 166, 31, 166, 138, 14, 34, 202, 14, 192, 183, 170, 180, 184, 161, 215,
        53, 141, 226, 228, 98, 105, 104, 141, 69, 36, 12, 216, 142, 55, 176, 117, 31, 29, 121, 137,
        9, 90, 44, 228, 131, 125, 68, 181, 159, 8, 184, 0, 0, 0, 151, 65, 22, 138, 144, 150, 127,
        108, 255, 208, 87, 226, 110, 99, 74, 24, 120, 99, 20, 76, 98, 201, 226, 153, 203, 94, 209,
        33, 46, 157, 140, 79, 37, 69, 220, 217, 70, 63, 247, 186, 75, 198, 156, 179, 9, 7, 108,
        190, 3, 0, 0, 0, 32, 0, 0, 0, 183, 248, 245, 36, 83, 219, 170, 18, 28, 124, 15, 241, 203,
        179, 209, 83, 223, 144, 56, 194, 4, 197, 42, 148, 238, 57, 10, 31, 58, 227, 11, 223, 172,
        110, 137, 124, 241, 9, 174, 172, 156, 112, 138, 203, 94, 29, 12, 66, 135, 220, 220, 153,
        204, 183, 109, 192, 226, 115, 33, 118, 30, 223, 232, 10, 244, 230, 137, 27, 210, 27, 218,
        229, 57, 72, 106, 251, 95, 23, 207, 78, 250, 200, 128, 74, 86, 11, 26, 247, 183, 153, 238,
        83, 7, 188, 147, 76, 213, 171, 30, 31, 237, 73, 24, 60, 16, 28, 122, 220, 86, 214, 205,
        205, 74, 124, 168, 199, 245, 6, 206, 185, 94, 113, 172, 19, 249, 192, 247, 122, 218, 217,
        98, 229, 143, 85, 210, 61,
    ];
    let package1 = PublicPackage::deserialize_from(&package1_bytes[..]).unwrap();

    let package2_bytes: [u8; 464] = [
        114, 47, 118, 27, 67, 116, 82, 234, 125, 80, 5, 23, 107, 34, 74, 188, 122, 185, 128, 46,
        84, 194, 85, 11, 196, 124, 42, 106, 198, 207, 178, 239, 125, 211, 153, 172, 15, 45, 165,
        83, 238, 112, 106, 39, 38, 123, 27, 222, 78, 247, 136, 167, 178, 166, 93, 241, 204, 143,
        54, 49, 94, 198, 146, 12, 2, 235, 110, 74, 14, 199, 134, 138, 59, 77, 169, 1, 110, 37, 162,
        251, 43, 189, 252, 47, 247, 111, 184, 115, 0, 100, 222, 32, 198, 254, 196, 5, 112, 235,
        166, 222, 145, 16, 158, 63, 146, 80, 140, 77, 2, 95, 159, 242, 57, 82, 138, 247, 33, 155,
        8, 11, 62, 221, 227, 105, 197, 113, 214, 249, 7, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 75,
        64, 119, 180, 141, 52, 29, 96, 114, 81, 119, 45, 229, 33, 53, 143, 124, 110, 152, 251, 26,
        71, 16, 239, 127, 133, 174, 55, 209, 241, 221, 227, 188, 165, 23, 112, 84, 206, 133, 31,
        206, 146, 98, 199, 35, 110, 108, 40, 202, 200, 131, 13, 154, 179, 64, 30, 120, 78, 93, 88,
        110, 65, 227, 32, 64, 172, 84, 227, 125, 133, 190, 18, 235, 49, 53, 86, 168, 175, 250, 78,
        154, 99, 30, 196, 166, 31, 166, 138, 14, 34, 202, 14, 192, 183, 170, 180, 184, 93, 195, 58,
        158, 215, 1, 60, 118, 12, 211, 108, 96, 158, 46, 184, 231, 44, 128, 171, 96, 50, 93, 9,
        188, 54, 246, 99, 141, 176, 33, 136, 11, 184, 0, 0, 0, 151, 65, 22, 138, 144, 150, 127,
        108, 255, 208, 87, 226, 110, 99, 74, 24, 120, 99, 20, 76, 98, 201, 226, 153, 203, 94, 209,
        33, 46, 157, 140, 79, 37, 69, 220, 217, 70, 63, 247, 186, 75, 198, 156, 179, 9, 7, 108,
        190, 3, 0, 0, 0, 32, 0, 0, 0, 183, 248, 245, 36, 83, 219, 170, 18, 28, 124, 15, 241, 203,
        179, 209, 83, 223, 144, 56, 194, 4, 197, 42, 148, 238, 57, 10, 31, 58, 227, 11, 223, 172,
        110, 137, 124, 241, 9, 174, 172, 156, 112, 138, 203, 94, 29, 12, 66, 135, 220, 220, 153,
        204, 183, 109, 192, 226, 115, 33, 118, 30, 223, 232, 10, 244, 230, 137, 27, 210, 27, 218,
        229, 57, 72, 106, 251, 95, 23, 207, 78, 250, 200, 128, 74, 86, 11, 26, 247, 183, 153, 238,
        83, 7, 188, 147, 76, 213, 171, 30, 31, 237, 73, 24, 60, 16, 28, 122, 220, 86, 214, 205,
        205, 74, 124, 168, 199, 245, 6, 206, 185, 94, 113, 172, 19, 249, 192, 247, 122, 218, 217,
        98, 229, 143, 85, 210, 61,
    ];
    let package2 = PublicPackage::deserialize_from(&package2_bytes[..]).unwrap();

    let package3_bytes: [u8; 464] = [
        114, 252, 166, 249, 254, 182, 154, 244, 83, 249, 107, 83, 140, 114, 0, 150, 147, 139, 40,
        52, 178, 185, 20, 254, 147, 121, 74, 47, 94, 164, 128, 190, 240, 175, 244, 104, 98, 2, 253,
        35, 208, 19, 163, 96, 96, 28, 160, 144, 194, 87, 217, 205, 125, 153, 242, 142, 63, 212,
        218, 84, 22, 128, 27, 253, 119, 181, 226, 203, 123, 115, 37, 202, 144, 184, 36, 153, 179,
        80, 125, 190, 159, 82, 233, 53, 6, 89, 153, 86, 122, 77, 39, 8, 0, 23, 137, 169, 160, 111,
        111, 41, 54, 243, 23, 56, 129, 142, 244, 248, 52, 189, 79, 1, 238, 157, 242, 96, 232, 163,
        74, 49, 75, 165, 210, 180, 165, 87, 128, 168, 4, 135, 0, 0, 0, 0, 195, 210, 5, 30, 2, 75,
        64, 119, 180, 141, 52, 29, 96, 114, 81, 119, 45, 229, 33, 53, 143, 124, 110, 152, 251, 26,
        71, 16, 239, 127, 133, 174, 55, 209, 241, 221, 227, 188, 165, 23, 112, 84, 206, 133, 31,
        206, 146, 98, 199, 35, 110, 108, 40, 202, 200, 131, 13, 154, 179, 64, 30, 120, 78, 93, 88,
        110, 65, 227, 32, 64, 172, 84, 227, 125, 133, 190, 18, 235, 49, 53, 86, 168, 175, 250, 78,
        154, 99, 30, 196, 166, 31, 166, 138, 14, 34, 202, 14, 192, 183, 170, 180, 184, 48, 28, 83,
        156, 57, 50, 186, 57, 210, 235, 214, 156, 171, 252, 31, 160, 212, 57, 189, 36, 218, 137,
        91, 186, 159, 229, 147, 59, 3, 12, 27, 8, 184, 0, 0, 0, 151, 65, 22, 138, 144, 150, 127,
        108, 255, 208, 87, 226, 110, 99, 74, 24, 120, 99, 20, 76, 98, 201, 226, 153, 203, 94, 209,
        33, 46, 157, 140, 79, 37, 69, 220, 217, 70, 63, 247, 186, 75, 198, 156, 179, 9, 7, 108,
        190, 3, 0, 0, 0, 32, 0, 0, 0, 183, 248, 245, 36, 83, 219, 170, 18, 28, 124, 15, 241, 203,
        179, 209, 83, 223, 144, 56, 194, 4, 197, 42, 148, 238, 57, 10, 31, 58, 227, 11, 223, 172,
        110, 137, 124, 241, 9, 174, 172, 156, 112, 138, 203, 94, 29, 12, 66, 135, 220, 220, 153,
        204, 183, 109, 192, 226, 115, 33, 118, 30, 223, 232, 10, 244, 230, 137, 27, 210, 27, 218,
        229, 57, 72, 106, 251, 95, 23, 207, 78, 250, 200, 128, 74, 86, 11, 26, 247, 183, 153, 238,
        83, 7, 188, 147, 76, 213, 171, 30, 31, 237, 73, 24, 60, 16, 28, 122, 220, 86, 214, 205,
        205, 74, 124, 168, 199, 245, 6, 206, 185, 94, 113, 172, 19, 249, 192, 247, 122, 218, 217,
        98, 229, 143, 85, 210, 61,
    ];
    let package3 = PublicPackage::deserialize_from(&package3_bytes[..]).unwrap();

    let (encrypted_secret_package, round2_public_packages) = round2::round2(
        &secret,
        &round1_secret_package_bytes,
        [&package1, &package2, &package3],
        rng,
    )
    .unwrap();
    hprintln!("Heap used {}", HEAP.used()).unwrap();
    hprintln!("encrypted_secret_package {:?}", encrypted_secret_package).unwrap();
    hprintln!("package {:?}", round2_public_packages.serialize()).unwrap();

    panic!("End of main");
}
